import React, { useEffect, useState } from 'react';
import Head from 'next/head';
import Header from '../components/Header';
import Path from '../components/Path';
import OneMoreFriend from '../components/SubBanner/OneMoreFriend';
import FilterCategory from '../components/FilterCategory';
import { MdKeyboardArrowDown } from 'react-icons/md';
import { PetCard } from '../components/BuyPet/PetCard';
import { BiFilterAlt } from 'react-icons/bi';
import { AiOutlineArrowUp, AiOutlineArrowDown } from 'react-icons/ai';
import { loadDogs } from '../Helper/access';
import Pagination from '@mui/material/Pagination';

const sortTypes = [
  {
    sortBy: null,
    order: null,
    icon: null,
  },
  {
    sortBy: 'price',
    order: 'asc',
    icon: AiOutlineArrowUp,
  },
  {
    sortBy: 'price',
    order: 'desc',
    icon: AiOutlineArrowDown,
  },
];

const Category = ({ data }) => {
  const [dogs, setDogs] = useState(data.dogs);
  const [totalPet, setTotalPet] = useState(data.count);
  const [page, setPage] = useState(1);
  const [queries, setQueries] = useState({ page, limit: 15 });
  const [typeOfSort, setTypeOfSort] = useState(sortTypes[0]);
  const IconNow = typeOfSort.icon;

  useEffect(() => {
    window.scrollTo(0, 0);
  }, [page]);

  useEffect(() => {
    const getDogs = async () => {
      Object.keys(queries).forEach((key) => {
        if (
          queries[key] === null ||
          queries[key] === '' ||
          queries[key] === [] ||
          queries[key] === {}
        ) {
          delete queries[key];
        }
      });
      const data = await loadDogs(queries);
      setDogs(data.dogs);
      setTotalPet(data.count);
    };
    getDogs();
  }, [queries]);

  const handleSort = (sortType) => {
    setTypeOfSort(sortType);
    setQueries((pre) => ({ ...pre, sortBy: sortType.sortBy, order: sortType.order }));
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="">
        <Path />
        <OneMoreFriend className="mt-3" />
        <div className="grid tablet:grid-cols-4 w-full gap-5">
          <FilterCategory setQueries={setQueries} />
          <div className="tablet:col-span-3">
            <div className="flex w-full h-[85px]   flex-col justify-start tablet:justify-between tablet:items-center tablet:flex-row">
              <div className="flex items-end">
                <p className="leading-8 text-[24px] font-bold text-[#003459]">Small Dog</p>
                <p className="text-14-20-500 text-[#667479] ml-[14px] mb-1">{totalPet} pupples</p>
              </div>
              <div className="dropdown flex w-full justify-between -order-1 tablet:order-1 tablet:w-auto my-6 target:my-0 relative cursor-pointer select-none">
                <div
                  tabindex="0"
                  className="flex pt-[6px] pb-1 px-[10px] text-14-20-500 text-[#667479] items-center border-2 rounded-[20px] border-[#CCD1D2]"
                >
                  <p className="ml-[10px]">Sort by:</p>
                  <div className="flex items-center  w-[60px] justify-center">
                    <p className="ml-1 text-center capitalize">{typeOfSort.sortBy || 'None'}</p>
                    {IconNow && <IconNow className="pb-[2px] h-[full]" />}
                  </div>
                  <MdKeyboardArrowDown className="ml-3 text-[16px] " />
                </div>
               
                <div
                  tabIndex="0"
                  class="dropdown-content w-full top-[40px] text-[#667479] border-2 rounded-[20px] border-[#CCD1D2]  bg-white p-1"
                >
                  {sortTypes
                    .filter((sortType) => sortType !== typeOfSort)
                    .map((sortType, index) => {
                      const Icon = sortType.icon;
                      return (
                        <div
                          className="w-full flex items-center justify-center p-1"
                          onClick={(e) => handleSort(sortType)}
                          key={index}
                        >
                          <p className="ml-1 capitalize">{sortType.sortBy || 'None'}</p>
                          {Icon && <Icon className="pb-[2px] h-[full]" />}
                        </div>
                      );
                    })}
                </div>
                <div className="flex items-center text-[#002A48] tablet:hidden ">
                  <BiFilterAlt className="text-[22px]" />
                  <p className="text-16-24-700 ml-3">Filter</p>
                </div>
              </div>
            </div>
            <div className="grid grid-cols-2 laptop:grid-cols-3 gap-x-[28px] gap-y-5">
              {dogs.map((dog) => (
                <PetCard dog={dog} />
              ))}
            </div>

            <div className="w-full flex justify-center mt-10">
              <Pagination
                count={Math.ceil(totalPet / 15)}
                variant="outlined"
                shape="rounded"
                color="primary"
                onChange={(e, page) => {
                  setPage(page);
                  setQueries((pre) => ({ ...pre, page }));
                }}
              />
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export async function getStaticProps() {
  // Call an external API endpoint to get posts.
  // You can use any data fetching library
  const data = await loadDogs({
    page: 1,
  });
  return {
    props: {
      data,
    },
  };
}

export default Category;
